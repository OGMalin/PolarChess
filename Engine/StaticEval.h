#pragma once

// Static pawn value. A try to move d and e pawn to the centre.
// If a pawn can reach 6 or 7 rank, go for it.
static int staticPawnValue[2][128] =
{
  0, 0, 0,  0,  0, 0, 0, 0,0,0,0,0,0,0,0,0, // White: a1-h1
  0, 0, 0,  0,  0, 0, 0, 0,0,0,0,0,0,0,0,0,
  0, 0, 0,  0,  0, 0, 0, 0,0,0,0,0,0,0,0,0,
  0, 0, 0, 25, 25, 0, 0, 0,0,0,0,0,0,0,0,0,
  0, 0, 5, 30, 30, 0, 0, 0,0,0,0,0,0,0,0,0,
 10,15,20, 35, 35,20,15,10,0,0,0,0,0,0,0,0,
 25,30,35, 40, 40,35,30,25,0,0,0,0,0,0,0,0,
  0, 0, 0,  0,  0, 0, 0, 0,0,0,0,0,0,0,0,0, 
  0, 0, 0,  0,  0, 0, 0, 0,0,0,0,0,0,0,0,0, // Black: a1-h1
 25,30,35, 40, 40,35,30,25,0,0,0,0,0,0,0,0,
 10,15,20, 35, 35,20,15,10,0,0,0,0,0,0,0,0,
  0, 0, 5, 30, 30, 0, 0, 0,0,0,0,0,0,0,0,0,
  0, 0, 0, 25, 25, 0, 0, 0,0,0,0,0,0,0,0,0,
  0, 0, 0,  0,  0, 0, 0, 0,0,0,0,0,0,0,0,0,
  0, 0, 0,  0,  0, 0, 0, 0,0,0,0,0,0,0,0,0,
  0, 0, 0,  0,  0, 0, 0, 0,0,0,0,0,0,0,0,0
};

// Knight best in the centre
static int staticKnightValue[2][128] =
{
  -5,-3,-3,-3,-3,-3,-3,-5,0,0,0,0,0,0,0,0, // White: a1-h1
  -3,-1, 0, 0, 0, 0, 0,-3,0,0,0,0,0,0,0,0,
  -3, 0,15,15,15,15, 0,-3,0,0,0,0,0,0,0,0,
  -3, 0,20,25,25,15, 0,-3,0,0,0,0,0,0,0,0,
  -3, 0,20,25,25,15, 0,-3,0,0,0,0,0,0,0,0,
  -3, 0,15,15,15,15, 0,-3,0,0,0,0,0,0,0,0,
  -3,-1, 0, 0, 0, 0,-1,-3,0,0,0,0,0,0,0,0,
  -5,-3,-3,-3,-3,-3,-3,-5,0,0,0,0,0,0,0,0,
  -5,-3,-3,-3,-3,-3,-3,-5,0,0,0,0,0,0,0,0, // Black: a1-h1
  -3,-1, 0, 0, 0, 0, 0,-3,0,0,0,0,0,0,0,0,
  -3, 0,15,15,15,15, 0,-3,0,0,0,0,0,0,0,0,
  -3, 0,20,25,25,15, 0,-3,0,0,0,0,0,0,0,0,
  -3, 0,20,25,25,15, 0,-3,0,0,0,0,0,0,0,0,
  -3, 0,15,15,15,15, 0,-3,0,0,0,0,0,0,0,0,
  -3,-1, 0, 0, 0, 0,-1,-3,0,0,0,0,0,0,0,0,
  -5,-3,-3,-3,-3,-3,-3,-5,0,0,0,0,0,0,0,0
};

// Bishop best on long diagonal
static int staticBishopValue[2][128] =
{
  0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0,0,0,0,0, // White: a1-h1
  0, 5, 3, 0, 0, 3, 5, 0,0,0,0,0,0,0,0,0,
  0, 3,10, 5, 5,10, 2, 0,0,0,0,0,0,0,0,0,
  0, 0, 5,10,10, 5, 0, 0,0,0,0,0,0,0,0,0,
  0, 0, 5,10,10, 5, 0, 0,0,0,0,0,0,0,0,0,
  0, 3,10, 5, 5,10, 3, 0,0,0,0,0,0,0,0,0,
  0, 5, 3, 0, 0, 3, 5, 0,0,0,0,0,0,0,0,0,
  0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0,0,0,0,0,
  0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0,0,0,0,0, // Black: a1-h1
  0, 5, 3, 0, 0, 3, 5, 0,0,0,0,0,0,0,0,0,
  0, 3,10, 5, 5,10, 2, 0,0,0,0,0,0,0,0,0,
  0, 0, 5,10,10, 5, 0, 0,0,0,0,0,0,0,0,0,
  0, 0, 5,10,10, 5, 0, 0,0,0,0,0,0,0,0,0,
  0, 3,10, 5, 5,10, 3, 0,0,0,0,0,0,0,0,0,
  0, 5, 3, 0, 0, 3, 5, 0,0,0,0,0,0,0,0,0,
  0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0,0,0,0,0
};

// Rook best on 1 or 7 rank
static int staticRookValue[2][128] =
{
   2, 2, 2, 5, 5, 2, 2, 2,0,0,0,0,0,0,0,0, // White: a1-h1
   0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0,0,0,0,0,
   0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0,0,0,0,0,
   0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0,0,0,0,0,
   0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0,0,0,0,0,
   0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0,0,0,0,0,
  25,25,25,25,25,25,25,25,0,0,0,0,0,0,0,0,
   0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0,0,0,0,0,
   0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0,0,0,0,0, // Black: a1-h1
  25,25,25,25,25,25,25,25,0,0,0,0,0,0,0,0,
   0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0,0,0,0,0,
   0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0,0,0,0,0,
   0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0,0,0,0,0,
   0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0,0,0,0,0,
   0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0,0,0,0,0,
   2, 2, 2, 5, 5, 2, 2, 2,0,0,0,0,0,0,0,0
};

static int staticQueenValue[2][128] =
{
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, // White: a1-h1
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, // Black: a1-h1
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
};

// Force and keep the king castled.
static int staticKingValue[2][128] =
{
   2,  3, 10,  0,  0,  0, 10,  2,0,0,0,0,0,0,0,0, // White: a1-h1
   0,  2,  0, -1, -1,  0,  2,  2,0,0,0,0,0,0,0,0,
  -2, -2, -2, -2, -2, -2, -2, -2,0,0,0,0,0,0,0,0,
  -4, -4, -4, -4, -4, -4, -4, -4,0,0,0,0,0,0,0,0,
  -6, -6, -6, -6, -6, -6, -6, -6,0,0,0,0,0,0,0,0,
  -8, -8, -8, -8, -8, -8, -8, -8,0,0,0,0,0,0,0,0,
 -10,-10,-10,-10,-10,-10,-10,-10,0,0,0,0,0,0,0,0,
 -12,-12,-12,-12,-12,-12,-12,-12,0,0,0,0,0,0,0,0,
 -12,-12,-12,-12,-12,-12,-12,-12,0,0,0,0,0,0,0,0, // Black: a1-h1
 -10,-10,-10,-10,-10,-10,-10,-10,0,0,0,0,0,0,0,0,
  -8, -8, -8, -8, -8, -8, -8, -8,0,0,0,0,0,0,0,0,
  -6, -6, -6, -6, -6, -6, -6, -6,0,0,0,0,0,0,0,0,
  -4, -4, -4, -4, -4, -4, -4, -4,0,0,0,0,0,0,0,0,
  -2, -2, -2, -2, -2, -2, -2, -2,0,0,0,0,0,0,0,0,
   0,  2,  0, -1, -1,  0,  2,  2,0,0,0,0,0,0,0,0,
   2,  3, 10,  0,  0,  0, 10,  2,0,0,0,0,0,0,0,0
};

